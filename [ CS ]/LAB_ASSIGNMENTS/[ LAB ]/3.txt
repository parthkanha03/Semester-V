Got it! Let's focus on **configuring firewall rules on Linux**. In Linux, we typically use **`iptables`** or **`firewalld`** to manage firewall rules, but since **`firewalld`** is more user-friendly for dynamic rule management, I’ll guide you using both methods.

### **1. Install `firewalld` and `iptables`**

If you don't have them installed already, here’s how to install **`firewalld`** and **`iptables`** on Linux:

* **Install firewalld:**

  ```bash
  sudo apt update
  sudo apt install firewalld
  ```

* **Install iptables (if not already installed):**

  ```bash
  sudo apt update
  sudo apt install iptables
  ```

---

### **2. Managing Inbound/Outbound Rules using `firewalld`**

Firewalld is the recommended method for most modern Linux distributions. Let's create and manage inbound and outbound rules using `firewalld`.

#### **Enable/Disable Inbound and Outbound Rules with `firewalld`**

1. **Start and Enable `firewalld` Service** (if it's not running already):

   ```bash
   sudo systemctl start firewalld
   sudo systemctl enable firewalld
   ```

2. **List Active Zones:**

   ```bash
   sudo firewall-cmd --get-active-zones
   ```

   This will list the zones that are active, like **`public`**, **`home`**, etc.

#### **Add or Remove Inbound Rules (Source of Traffic)**

To create rules for inbound traffic:

1. **Allow Inbound Traffic on Specific Port (e.g., HTTP - port 80)**:

   ```bash
   sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
   sudo firewall-cmd --reload
   ```

2. **Block Inbound Traffic from a Specific IP Address**:

   ```bash
   sudo firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" source address="192.168.1.100" reject' --permanent
   sudo firewall-cmd --reload
   ```

3. **Disable a Rule** (Example: Disabling HTTP (Port 80) Access):

   ```bash
   sudo firewall-cmd --zone=public --remove-port=80/tcp --permanent
   sudo firewall-cmd --reload
   ```

#### **Add or Remove Outbound Rules (Destination of Traffic)**

To create outbound rules, use a similar method:

1. **Allow Outbound Traffic on Specific Port (e.g., port 443 for HTTPS)**:

   ```bash
   sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
   sudo firewall-cmd --reload
   ```

2. **Block Outbound Traffic to a Specific IP**:

   ```bash
   sudo firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" destination address="203.0.113.0" reject' --permanent
   sudo firewall-cmd --reload
   ```

---

### **3. Setting Rules Based on IP and Subnet using `firewalld`**

#### **Allow/Block Traffic Based on Source IP/Subnet**

1. **Allow Inbound Traffic from a Specific IP Range**:

   ```bash
   sudo firewall-cmd --zone=public --add-source=192.168.1.0/24 --permanent
   sudo firewall-cmd --reload
   ```

   This will allow traffic from the **`192.168.1.0/24`** subnet.

2. **Block Inbound Traffic from a Specific IP**:

   ```bash
   sudo firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" source address="192.168.1.100" reject' --permanent
   sudo firewall-cmd --reload
   ```

---

### **4. Set Rule Based on Protocol (TCP/UDP) using `firewalld`**

#### **Allow/Block Traffic Based on Protocol**

1. **Allow TCP Traffic on Specific Port (e.g., HTTP port 80)**:

   ```bash
   sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
   sudo firewall-cmd --reload
   ```

2. **Allow UDP Traffic on Specific Port (e.g., DNS port 53)**:

   ```bash
   sudo firewall-cmd --zone=public --add-port=53/udp --permanent
   sudo firewall-cmd --reload
   ```

3. **Block Specific Protocol (e.g., Block all ICMP/ Ping requests)**:

   ```bash
   sudo firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" protocol value="icmp" reject' --permanent
   sudo firewall-cmd --reload
   ```

   This will block all **ICMP** traffic (ping requests).

---

### **5. Checking and Verifying the Rules**

* **List All Active Rules**:

  ```bash
  sudo firewall-cmd --list-all
  ```

* **Check if a Specific Rule is Active**:

  ```bash
  sudo firewall-cmd --zone=public --query-port=80/tcp
  ```

* **Check if Specific Source IP is Blocked**:

  ```bash
  sudo firewall-cmd --zone=public --query-rich-rule='rule family="ipv4" source address="192.168.1.100" reject'
  ```

---

### **6. Managing Firewall Rules using `iptables`**

If you're using `iptables` for more manual control over firewall rules, here's how to create similar rules.

#### **Basic Commands for Inbound/Outbound Rules with `iptables`**

1. **Allow Incoming Traffic on TCP Port 80** (HTTP):

   ```bash
   sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
   ```

2. **Block Incoming Traffic from Specific IP (e.g., `192.168.1.100`)**:

   ```bash
   sudo iptables -A INPUT -s 192.168.1.100 -j DROP
   ```

3. **Allow Outbound Traffic on TCP Port 443 (HTTPS)**:

   ```bash
   sudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
   ```

#### **Creating a Rule Based on IP/Subnet**

1. **Allow Traffic from a Specific IP Range (`192.168.1.0/24`)**:

   ```bash
   sudo iptables -A INPUT -s 192.168.1.0/24 -j ACCEPT
   ```

2. **Block Traffic to a Specific IP (`203.0.113.100`)**:

   ```bash
   sudo iptables -A OUTPUT -d 203.0.113.100 -j DROP
   ```

#### **Creating Rules Based on Protocol**

1. **Allow UDP Traffic on Port 53 (DNS)**:

   ```bash
   sudo iptables -A INPUT -p udp --dport 53 -j ACCEPT
   ```

2. **Allow ICMP (Ping) Requests**:

   ```bash
   sudo iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
   ```

---

### **7. Saving and Persisting `iptables` Rules**

If you use `iptables`, the rules you set are not persistent after a reboot by default. To make the rules persistent:

* **Save the iptables rules**:

  ```bash
  sudo iptables-save > /etc/iptables/rules.v4
  ```

* **Restore rules on reboot**:

  * On Ubuntu/Debian systems, `iptables-persistent` can automatically restore rules:

    ```bash
    sudo apt install iptables-persistent
    ```

---

### **Recap for Linux Firewall (Using `firewalld` and `iptables`):**

1. **Enable/Disable Rules**:

   * **`firewalld`**: Use `--add-port` or `--remove-port` for adding/removing ports.
   * **`iptables`**: Use `-A INPUT`/`-A OUTPUT` for adding rules, `-D` for deleting.

2. **Rules Based on IP/Subnet**:

   * **`firewalld`**: Use `--add-source` to specify allowed IP ranges.
   * **`iptables`**: Use `-s` (source) and `-d` (destination) for IP filtering.

3. **Rules Based on Protocol**:

   * **`firewalld`**: Specify protocol (`icmp`, `tcp`, `udp`) and ports.
   * **`iptables`**: Use `-p` for protocol, `--dport` for destination port.

4. **Check and Verify**:

   * **`firewalld`**: Use `--list-all` to check active rules.
   * **`iptables`**: Use `sudo iptables -L` to list current rules.

---

Let me know if you need any additional details or help with specific rules!
